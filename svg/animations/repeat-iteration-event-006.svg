<svg xmlns="http://www.w3.org/2000/svg"><title>Animation triggers on &apos;repeatEvent&apos; iteration</title><script xmlns="http://www.w3.org/1999/xhtml" src="/resources/testharness.js"/><script xmlns="http://www.w3.org/1999/xhtml" src="/resources/testharnessreport.js"/><g><animate id="anim" attributeName="visibility" begin="0s" dur="2s" repeatCount="4" to="visible"/><rect width="100" height="100" x="0" y="0" fill="green"><set attributeName="fill" begin="anim.repeat(0)" to="red"/></rect><rect width="100" height="100" x="200" y="0" fill="red"><set attributeName="fill" begin="anim.repeat(1)" to="green"/></rect><rect width="100" height="100" x="0" y="200" fill="red"><set attributeName="fill" begin="anim.repeat(2)" to="green"/></rect><rect width="100" height="100" x="200" y="200" fill="red"><set attributeName="fill" begin="anim.repeat(3)" to="green"/></rect></g><script>promise_test(t =&gt; { let svg = document.documentElement; let anim = document.getElementById(&apos;anim&apos;); let animWatcher = new EventWatcher(t, anim, [&apos;beginEvent&apos;, &apos;repeatEvent&apos;]); // Wait for #anims &apos;beginEvent&apos; and then step through the // &apos;repeatEvents&apos; one at a time. let stepsPromise = animWatcher.wait_for(&apos;beginEvent&apos;).then(() =&gt; { svg.setCurrentTime(1.99); return animWatcher.wait_for(&apos;repeatEvent&apos;); }).then(() =&gt; { svg.setCurrentTime(3.99); return animWatcher.wait_for(&apos;repeatEvent&apos;); }).then(() =&gt; { svg.setCurrentTime(5.99); return animWatcher.wait_for(&apos;repeatEvent&apos;); }); let setElements = document.getElementsByTagName(&apos;set&apos;); let setBeginWatchers = Array.from(setElements).map(element =&gt; { return new EventWatcher(t, element, &apos;beginEvent&apos;); }); // Expect &apos;beginEvent&apos; to be dispatched for all but the first &apos;set&apos; element. let beginPromises = setBeginWatchers.slice(1).map(watcher =&gt; { return watcher.wait_for(&apos;beginEvent&apos;); }) return Promise.all([stepsPromise, ...beginPromises]); });</script></svg>